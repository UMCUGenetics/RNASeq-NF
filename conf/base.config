params {

  /*==========================
      Which steps to run
  /*==========================*/

  // Pre-alignment.
  runFastQC = false
  runTrimGalore = true
  runFastQCTrimmed = false
  runSortMeRNA = true

  // Alignment - STAR
  runSTAR = true
  runMarkDup = true

  // Counting - SubRead / FeatureCounts
  runFeatureCounts = true

  // Salmon
  runSalmon = false

  // QC
  runFastQC = true
  runFastQCTrimmed = true
  runMultiQC = true
  runPostQC = true
  runPreseq = true

  // GATK (v4)
  runGermlineCallingGATK = false
  runBQRS = false

  /*==========================
              Settings
  /*==========================*/

  // Standard options
  fastq_path = ""
  out_dir = ""
  gencode = false
  singleEnd = false

  // Standard references
  genome_config = "$baseDir/conf/test_genome.config"
  rRNA_database_manifest = "$baseDir/assets/sortmerna-db-default.txt"

  // Library strandedness
  stranded = false
  revstranded = false
  unstranded = true

  // Custom settings of tools.
  options.FastQC = ''
  options.TrimGalore = ''
  options.SortMeRNA = ''
  options.STAR = ''
  options.FeatureCounts = ''
  options.Salmon = '--seqBias --useVBOpt --gcBias'
  options.GATKGermline = ''
  options.BQRS = ''
  options.Preseq = "-v -B -D"
  options.MultiQC = '--interactive'

  // FeatureCounts settings (do not add -p). It is set dynamically based on singleEnd parameter).
  fc_extra_attributes = 'gene_name'
  fc_group_features = 'gene_id'
  fc_count_type = 'exon'
  fc_group_features_type = 'gene_biotype'
  normalize_counts = true

  //Sambamba settings
  markdup.toolOptions = '--overflow-list-size=2000000'
  sambambamarkdup.mem = '32G'

  //Salmon
  saveUnaligned = false

  //GATK4 / Picard settings
  splitintervals.toolOptions = '-SCATTER_COUNT 100 --UNIQUE true -M BALANCING_WITHOUT_INTERVAL_SUBDIVISION_WITH_OVERFLOW'
  haplotypecaller.toolOptions = '--standard-min-confidence-threshold-for-calling 20.0 --dont-use-soft-clipped-bases'
  variantfiltration.toolOptions = '--cluster-window-size 35 --cluster-size 3'
  baserecalibrator.toolOptions = ''
  mergevcfs.toolOptions = ''
  mergebams.toolOptions = ''
  splitintervals.mem = '12G'
  baserecalibrator.mem = '9G'
  gatherbaserecalibrator.mem = '6G'
  applybqsr.mem = '9G'
  haplotypecaller.mem = '25G'
  mergevcf.mem = '14G'
  variantfiltration.mem = '10G'
  mergebams.mem = '5G'

  //MultiQC settings
  multiqc.mem = '4G'

  //Reference defaults
  star_index = false
  transcripts_fasta = false
  genome_gtf = false
  genome_bed = false
  genome_fasta = false
  salmon_index = false
  genome_known_sites = false
  scatter_interval_list = false
  genome_dict = false
  genome_index = false
  help = false

}

process {
    errorStrategy = 'retry'
    maxRetries = 1
    withLabel :  STAR_2_7_3a_AlignReads  {
          time = '24h'
          penv = 'threaded'
          cpus = 4
          memory = '35G'
          publishDir.path = "${params.out_dir}/STAR"
          publishDir.mode = 'copy'
          publishDir.saveAs = {filename -> if (filename.indexOf(".Log.out") > 0) "logs/$filename"
                              else if  (filename.indexOf(".Log.final.out") > 0) "logs/$filename"
                              else if  (filename.indexOf(".bam") > 0) "mapped/$filename"
                              else if  (filename.indexOf(".SJ.out.tab") > 0) "SJ/$filename"
                              else if  (filename.indexOf(".mate1") > 0) "unmapped/$filename"
                              else if  (filename.indexOf(".mate2") > 0) "unmapped/$filename" }

    }
    withLabel : SAMBAMBA_0_7_1_Index {
          time = '24h'
          penv = 'threaded'
          cpus = 2
          memory = '10G'
          publishDir.path = "${params.out_dir}/STAR"
          publishDir.mode = 'copy'
          publishDir.saveAs = {filename -> if (filename.indexOf(".bai") > 0) "mapped/$filename" }
    }
    withLabel : HTSeq_0_11_3_Count {
          time = '24h'
          penv = 'threaded'
          cpus = 2
          memory = '25G'
          publishDir.path = "${params.out_dir}/HTSeq"
          publishDir.mode = 'copy'
          publishDir.saveAs = {filename -> if (filename.indexOf(".txt") > 0) "read_counts/$filename" }
    }
    withLabel: RSeQC_3_0_1 {
          time = '24h'
          penv = 'threaded'
          cpus = 2
          memory = '25G'
          publishDir.path = "${params.out_dir}/QC/RSeQC"
          publishDir.mode = 'copy'
          publishDir.saveAs = {filename ->
                         if (filename.indexOf("bam_stat.txt") > 0) "bam_stat/$filename"
                         else if (filename.indexOf("infer_experiment.txt") > 0) "infer_experiment/$filename"
                              else if (filename.indexOf("read_distribution.txt") > 0) "read_distribution/$filename"
                              else if (filename.indexOf("read_duplication.DupRate_plot.pdf") > 0) "read_duplication/$filename"
                              else if (filename.indexOf("read_duplication.DupRate_plot.r") > 0) "read_duplication/rscripts/$filename"
                              else if (filename.indexOf("read_duplication.pos.DupRate.xls") > 0) "read_duplication/dup_pos/$filename"
                              else if (filename.indexOf("read_duplication.seq.DupRate.xls") > 0) "read_duplication/dup_seq/$filename"
                              else if (filename.indexOf("RPKM_saturation.eRPKM.xls") > 0) "RPKM_saturation/rpkm/$filename"
                              else if (filename.indexOf("RPKM_saturation.rawCount.xls") > 0) "RPKM_saturation/counts/$filename"
                              else if (filename.indexOf("RPKM_saturation.saturation.pdf") > 0) "RPKM_saturation/$filename"
                              else if (filename.indexOf("RPKM_saturation.saturation.r") > 0) "RPKM_saturation/rscripts/$filename"
                              else if (filename.indexOf("inner_distance.txt") > 0) "inner_distance/$filename"
                              else if (filename.indexOf("inner_distance_freq.txt") > 0) "inner_distance/data/$filename"
                              else if (filename.indexOf("inner_distance_plot.r") > 0) "inner_distance/rscripts/$filename"
                              else if (filename.indexOf("inner_distance_plot.pdf") > 0) "inner_distance/plots/$filename"
                              else if (filename.indexOf("junction_plot.r") > 0) "junction_annotation/rscripts/$filename"
                              else if (filename.indexOf("junction.xls") > 0) "junction_annotation/data/$filename"
                    else if (filename.indexOf(".junction_annotation_log.txt") > 0) "junction_annotation/log/$filename"
                              else if (filename.indexOf("splice_events.pdf") > 0) "junction_annotation/events/$filename"
                              else if (filename.indexOf("splice_junction.pdf") > 0) "junction_annotation/junctions/$filename"
                              else if (filename.indexOf("junctionSaturation_plot.pdf") > 0) "junction_saturation/$filename"
                              else if (filename.indexOf("junctionSaturation_plot.r") > 0) "junction_saturation/rscripts/$filename"
                              else if (filename.indexOf("tin.xls") > 0) "tin/$filename"
                              else if (filename.indexOf("summary.txt") > 0) "tin/$filename"
                              else filename }
     }
    withLabel: Preseq_2_0_3 {
          time = '24h'
          penv = 'threaded'
          cpus = 2
          memory = '15G'
          publishDir.path = "${params.out_dir}/QC/Preseq"
          publishDir.mode = 'copy'
          publishDir.saveAs = {filename -> if (filename.indexOf(".ccurve.txt") > 0) "complexity_curve/$filename" }
    }
    withLabel : SAMBAMBA_0_7_1_Markdup {
          time = '24h'
          penv = 'threaded'
          cpus = 6
          memory = '32G'
          publishDir.path = "${params.out_dir}/MarkDup"
          publishDir.mode = 'copy'
          publishDir.saveAs = {filename -> if (filename.indexOf(".bam") > 0) "markdup/$filename"
                              else if (filename.indexOf(".bai") > 0) "markdup/$filename" }
    }
    withLabel : GATK_4_1_3_0_SplitNCigarReads {
          time = '24h'
          penv = 'threaded'
          cpus = 2
          memory = '12G'
    }
    withLabel : Salmon_1_2_1_Quant {
          time = '24h'
          penv = 'threaded'
          cpus = 2
          memory = '25G'
          publishDir.path = "${params.out_dir}/Salmon"
          publishDir.mode = 'copy'
    }
    withLabel : Salmon_1_2_1_QuantMerge {
          time = '24h'
          penv = 'threaded'
          cpus = 2
          memory = '5G'
          publishDir.path = "${params.out_dir}/read_counts/Salmon"
          publishDir.mode = 'copy'
    }
    withLabel : Salmon_1_2_1_Index {
          time = '24h'
          penv = 'threaded'
          cpus = 2
          memory = '25G'
          publishDir.path = "${params.out_dir}/reference_resources/Salmon"
          publishDir.mode = 'copy'
    }
    withLabel: GATK_4_1_3_0_Splitintervals {
          memory = '12G'
          time = '1h'
     }
    withLabel : GATK_4_1_3_0_Baserecalibrator {
          memory = '9G'
          time = '1h'
    }
    withLabel : GATK_4_1_3_0_Gatherbaserecalibrator {
          memory = '6G'
          time = '1h'
    }
    withLabel : GATK_4_1_3_0_Applybqsr {
          memory = '9G'
          time = '1h'
    }
    withLabel : GATK_4_1_3_0_Haplotypecaller {
          memory = '25G'
          time = '12h'
    }
    withLabel : GATK_4_1_3_0_Mergevcfs {
          memory = '14G'
          time = '4h'
          publishDir.path = "${params.out_dir}/GATK/vcf/raw"
          publishDir.mode = 'copy'
    }
    withLabel : GATK_4_1_3_0_Variantfiltration {
          memory = '10G'
          time = '4h'
          publishDir.path = "${params.out_dir}/GATK/vcf/filtered"
          publishDir.mode = 'copy'
    }
    withLabel : SAMBAMBA_0_7_1_mergebams {
          cpus = 10
          penv = 'threaded'
          memory = '5G'
          time = '2h'
    }
    withLabel : MultiQC_1_8 {
          memory = '4G'
          time = '1h'
          publishDir.path = "${params.out_dir}/report"
          publishDir.mode = 'copy'
    }
    withLabel : mergehtseqcounts {
          memory = '1G'
          time = '1h'
          publishDir.path = "${params.out_dir}/read_counts/HTSeq"
          publishDir.mode = 'copy'
    }
    withLabel : biconductor_3_20_7_edger_normalize {
          memory = '5G'
          time = '1h'
          publishDir.path = "${params.out_dir}/read_counts"
          publishDir.mode = 'copy'
          publishDir.saveAs = {filename -> if (filename.indexOf("_RPKM.txt") > 0) "normalized/$filename"
                              else if (filename.indexOf("_CPM.txt") > 0) "normalized/$filename"
                              else null }
    }
    withLabel : subread_2_0_0_FeatureCounts {
          time = '24h'
          penv = 'threaded'
          cpus = 10
          memory = '25G'
          publishDir.path = "${params.out_dir}/read_counts/featureCounts"
          publishDir.mode = 'copy'
          publishDir.saveAs = {filename -> if (filename.indexOf("_biotype_") > 0) "biotypes/$filename"
			             else "counts/$filename" }
     }
     withLabel : STAR_2_7_3a_GenomeGenerate {
          time = '24h'
          penv = 'threaded'
          cpus = 12
          memory = '150G'
          publishDir.path = "${params.out_dir}/reference_resources/STAR"
          publishDir.mode = 'copy'
     }
     withLabel : ucsc_377_GenePredToBed {
          time = '24h'
          penv = 'threaded'
          cpus = 2
          memory = '15G'
          publishDir.path = "${params.out_dir}/reference_resources/misc"
          publishDir.mode = 'copy'
     }
     withLabel : ucsc_377_GtfToGenePred {
          time = '24h'
          penv = 'threaded'
          cpus = 2
          memory = '15G'
     }
     withLabel : CreateIntervalList {
          time = '1h'
          publishDir.path = "${params.out_dir}/reference_resources/misc"
          publishDir.mode = 'copy'
     }
     withLabel : getExonLenghts{
          time = '1h'
          publishDir.path = "${params.out_dir}/reference_resources/misc"
          publishDir.mode = 'copy'
     }
     withLabel : SortMeRNA_4_2_0 {
          time = '24h'
          penv = 'threaded'
          cpus = 6
          memory = '35G'
          publishDir.path = "${params.out_dir}/QC/"
          publishDir.mode = 'copy'
          publishDir.saveAs = {filename ->
                         if (filename.indexOf("_rRNA_report.txt") > 0) "SorteMeRNA/$filename"
			 else if (filename.indexOf("_filtered_rRNA.fastq.gz") > 0) "SorteMeRNA/rRNA-reads/$filename"
                         else null }

     }
     withLabel : TrimGalore_0_6_5 {
          time = '24h'
          penv = 'threaded'
          cpus = 4
          memory = '15G'
          publishDir.path = "${params.out_dir}/QC/"
          publishDir.mode = 'copy'
          publishDir.saveAs = {filename ->
                         if (filename.indexOf("_fastqc") > 0) "FastQC/$filename"
                         else if (filename.indexOf("trimming_report.txt") > 0) "TrimGalore/logs/$filename"
                         else null}
     }
}
