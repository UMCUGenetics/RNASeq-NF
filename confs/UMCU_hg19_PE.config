manifest {
    homePage = 'https://github.com/UMCUGenetics/RNASeq-NF'
    description = 'RNASeq-NF is an NGS analysis pipeline for RNA expression quantification'
    mainScript = 'main.nf'
    version = '1.0.0rc1'
    nextflowVersion = '20.04.1'
}

params {

    /*==========================ƒ
    Reference settings
    /*==========================*/

    genome_fasta = '/hpc/cog_bioinf/GENOMES/Homo_sapiens.GRCh37.GATK.illumina/Homo_sapiens.GRCh37.GATK.illumina.fa'
    genome_gtf = '/hpc/cog_bioinf/GENOMES/STAR/Homo_sapiens.GRCh37/Homo_sapiens.GRCh37.74.gtf'
    genome_bed = '/hpc/cog_bioinf/ubec/tools/RSeQC/Homo_sapiens.GRCh37.74.bed12'
    genome_dict = '/hpc/cog_bioinf/GENOMES/Homo_sapiens.GRCh37.GATK.illumina/Homo_sapiens.GRCh37.GATK.illumina.dict'
    genome_index = '/hpc/cog_bioinf/GENOMES/Homo_sapiens.GRCh37.GATK.illumina/Homo_sapiens.GRCh37.GATK.illumina.fa.fai'
    genome_known_sites = ['/hpc/cog_bioinf/common_dbs/GATK_bundle/1000G_phase1.indels.b37.vcf',
                          '/hpc/cog_bioinf/common_dbs/GATK_bundle/dbsnp_137.b37.vcf',
                          '/hpc/cog_bioinf/common_dbs/GATK_bundle/Mills_and_1000G_gold_standard.indels.b37.vcf']
    scatter_interval_list = '/hpc/cog_bioinf/ubec/tools/Homo_sapiens.GRCh37.GATK.illumina.chromosomes.interval_list'
    star_index = '/hpc/cog_bioinf/GENOMES/STAR/2.7.3a/Homo_sapiens.GRCh37.GATK.illumina'
    salmon_index = '/hpc/cog_bioinf/GENOMES/Salmon/1.2.1/Homo_sapiens.GRCh37.75.cdna.all'
    transcripts_fasta = '/hpc/cog_bioinf/GENOMES/RSEM/GRCh37/GRCh37.transcripts.fa'


    /*==========================ƒ
    workflow steps
    /*==========================*/

    // Pre-alignment processing.
    runTrimGalore = true
    runSortMeRNA = true

    // Alignment - STAR - Sambamba markdup
    runMapping = true

    // Counting - SubRead / FeatureCounts
    runFeatureCounts = true

    // Salmon
    runSalmon = false

    // QC
    runFastQC = true
    runMultiQC = true
    runPostQC = true
    runRSeQC_TIN = true

    // GATK (v4)
    runGermlineCallingGATK = false
    runGATK4_BQSR = true
    /*==========================
                  Settings
    /*==========================*/

    // Standard options
    gencode = false
    singleEnd = false
    help= false

    // Standard references
    rRNA_database_manifest = "$baseDir/assets/sortmerna-db-default.txt"

    // Library strandedness
    stranded = true
    revstranded = false
    unstranded = false

    // Custom settings of tools.
    options.FastQC = ''
    options.TrimGalore = '--fastqc'
    options.SortMeRNA = ''
    options.STAR = '--outReadsUnmapped Fastx'
    options.FeatureCounts = '-p'
    options.Salmon_quant = '--seqBias --useVBOpt --gcBias'
    options.Salmon_index = ''
    options.Salmon_quantmerge = ''
    options.GATK4_SplitIntervals = '-SCATTER_COUNT 100 --UNIQUE true -M BALANCING_WITHOUT_INTERVAL_SUBDIVISION_WITH_OVERFLOW'
    options.GATK4_HaplotypeCaller = '--standard-min-confidence-threshold-for-calling 20.0 --dont-use-soft-clipped-bases'
    options.GATK4_VariantFiltration = '--cluster-window-size 35 --cluster-size 3'
    options.GATK4_BQRS = ''
    options.Sambamba_MergeBams = ''
    options.Preseq = "-v -B -D"
    options.MultiQC = '--interactive'

    //featureCounts
    fc_group_features = 'gene_id'
    fc_count_type = 'exon'
    fc_group_features_type = 'gene_biotype'
    fc_extra_attributes = 'gene_name'
    normalize_counts = true
    biotypeQC = true

    // Salmon additional options
    saveUnaligned = false

    //Memory settings for SGE profile
    sambambamarkdup.mem = '32G'
    splitintervals.mem = '12G'
    baserecalibrator.mem = '9G'
    gatherbaserecalibrator.mem = '6G'
    applybqsr.mem = '9G'
    haplotypecaller.mem = '25G'
    mergevcf.mem = '14G'
    variantfiltration.mem = '10G'
    mergebams.mem = '5G'
    multiqc.mem = '4G'

}

process {
    errorStrategy = 'retry'
    maxRetries = 1
    withLabel :  STAR_2_7_3a_AlignReads  {
          time = '24h'
          penv = 'threaded'
          cpus = 4
          memory = '35G'
          publishDir.path = "${params.out_dir}/STAR"
          publishDir.mode = 'copy'
          publishDir.saveAs = {filename -> if (filename.indexOf("_Log.out") > 0) "logs/$filename" 
                              else if  (filename.indexOf("_Log.final.out") > 0) "logs/$filename" 
                              else if  (filename.indexOf(".bam") > 0) "mapped/$filename" 
                              else if  (filename.indexOf("_SJ.out.tab") > 0) "SJ/$filename" 
                              else if  (filename.indexOf(".mate1") > 0) "unmapped/$filename" 
                              else if  (filename.indexOf(".mate2") > 0) "unmapped/$filename" }	 
     
    } 
    withLabel : Sambamba_0_7_0_Index {
          time = '24h'
          penv = 'threaded'
          cpus = 2
          memory = '10G'
          publishDir.path = "${params.out_dir}/STAR"
          publishDir.mode = 'copy'
          publishDir.saveAs = {filename -> if (filename.indexOf(".bai") > 0) "mapped/$filename" }
    }
    withLabel: RSeQC_3_0_1 {
          time = '24h'
          penv = 'threaded'
          cpus = 2
          memory = '25G'
          publishDir.path = "${params.out_dir}/QC/RSeQC"
          publishDir.mode = 'copy'
          publishDir.saveAs = {filename ->
                         if (filename.indexOf("bam_stat.txt") > 0) "bam_stat/$filename"
                         else if (filename.indexOf("infer_experiment.txt") > 0) "infer_experiment/$filename"
                              else if (filename.indexOf("read_distribution.txt") > 0) "read_distribution/$filename"
                              else if (filename.indexOf("read_duplication.DupRate_plot.pdf") > 0) "read_duplication/$filename"
                              else if (filename.indexOf("read_duplication.DupRate_plot.r") > 0) "read_duplication/rscripts/$filename"
                              else if (filename.indexOf("read_duplication.pos.DupRate.xls") > 0) "read_duplication/dup_pos/$filename"
                              else if (filename.indexOf("read_duplication.seq.DupRate.xls") > 0) "read_duplication/dup_seq/$filename"
                              else if (filename.indexOf("RPKM_saturation.eRPKM.xls") > 0) "RPKM_saturation/rpkm/$filename"
                              else if (filename.indexOf("RPKM_saturation.rawCount.xls") > 0) "RPKM_saturation/counts/$filename"
                              else if (filename.indexOf("RPKM_saturation.saturation.pdf") > 0) "RPKM_saturation/$filename"
                              else if (filename.indexOf("RPKM_saturation.saturation.r") > 0) "RPKM_saturation/rscripts/$filename"
                              else if (filename.indexOf("inner_distance.txt") > 0) "inner_distance/$filename"
                              else if (filename.indexOf("inner_distance_freq.txt") > 0) "inner_distance/data/$filename"
                              else if (filename.indexOf("inner_distance_plot.r") > 0) "inner_distance/rscripts/$filename"
                              else if (filename.indexOf("inner_distance_plot.pdf") > 0) "inner_distance/plots/$filename"
                              else if (filename.indexOf("junction_plot.r") > 0) "junction_annotation/rscripts/$filename"
                              else if (filename.indexOf("junction.xls") > 0) "junction_annotation/data/$filename"
                    else if (filename.indexOf(".junction_annotation_log.txt") > 0) "junction_annotation/log/$filename"
                              else if (filename.indexOf("splice_events.pdf") > 0) "junction_annotation/events/$filename"
                              else if (filename.indexOf("splice_junction.pdf") > 0) "junction_annotation/junctions/$filename"
                              else if (filename.indexOf("junctionSaturation_plot.pdf") > 0) "junction_saturation/$filename"
                              else if (filename.indexOf("junctionSaturation_plot.r") > 0) "junction_saturation/rscripts/$filename"
                              else filename }
     }
   withLabel: RSeQC_3_0_1_TIN {
          time = '24h'
          penv = 'threaded'
          cpus = 2
          memory = '35G'
          publishDir.path = "${params.out_dir}/QC/RSeQC/TIN"
          publishDir.mode = 'copy'     
    }
    withLabel: Preseq_2_0_3 {
          time = '24h'
          penv = 'threaded'
          cpus = 2
          memory = '15G'
          publishDir.path = "${params.out_dir}/QC/Preseq"
          publishDir.mode = 'copy'
          publishDir.saveAs = {filename -> if (filename.indexOf(".ccurve.txt") > 0) "complexity_curve/$filename" }
    }
    withLabel : Sambamba_0_7_0_Markdup {
          time = '24h'
          penv = 'threaded'
          cpus = 6
          memory = '32G'
          publishDir.path = "${params.out_dir}/MarkDup"
          publishDir.mode = 'copy'
          publishDir.saveAs = {filename -> if (filename.indexOf(".bam") > 0) "markdup/$filename"
                              else if (filename.indexOf(".bai") > 0) "markdup/$filename" }
    }
    withLabel : GATK_4_1_3_0_SplitNCigarReads {
          time = '24h'
          penv = 'threaded'
          cpus = 2
          memory = '12G'
          //publishDir.path = "${params.out_dir}/GATK/bam"
    } 
    withLabel : Salmon_1_2_1_Quant {
          time = '24h'
          penv = 'threaded'
          cpus = 2
          memory = '25G'
          publishDir.path = "${params.out_dir}/Salmon"
          publishDir.mode = 'copy'
    }
    withLabel : Salmon_1_2_1_QuantMerge {
          time = '24h'
          penv = 'threaded'
          cpus = 2
          memory = '5G'
          publishDir.path = "${params.out_dir}/read_counts/Salmon"
          publishDir.mode = 'copy'
    }
    withLabel : Salmon_1_2_1_Index {
          time = '24h'
          penv = 'threaded'
          cpus = 2
          memory = '25G'
          publishDir.path = "${params.out_dir}/reference_resources/Salmon"
          publishDir.mode = 'copy'
    }
    withLabel: GATK_4_1_3_0_SplitIntervals {
          memory = '12G'
          time = '1h'
     }
    withLabel : GATK_4_1_3_0_BaseRecalibration {
          memory = '9G'
          time = '1h'
    }
    withLabel : GATK_4_1_3_0_GatherBaseRecalibrationTables {
          memory = '6G'
          time = '1h'
    }
    withLabel : GATK_4_1_3_0_BaseRecalibrationTable {
          memory = '9G'
          time = '1h'
    }
    withLabel : GATK_4_1_3_0_HaplotypeCaller {
          memory = '25G'
          time = '12h'
    }   
    withLabel : GATK_4_1_3_0_MergeVCFs {
          memory = '14G'
          time = '4h'
          publishDir.path = "${params.out_dir}/GATK/vcf/raw"
          publishDir.mode = 'copy'
    }
    withLabel : GATK_4_1_3_0_VariantFiltration {
          memory = '10G'
          time = '4h'
          publishDir.path = "${params.out_dir}/GATK/vcf/filtered"
          publishDir.mode = 'copy'
    }
    withLabel : Sambamba_0_7_0_Merge {
          cpus = 10
          penv = 'threaded'
          memory = '5G'
          time = '2h'
          //publishDir.path = "${params.out_dir}/GATK/bam"
    }
    withLabel : MultiQC_1_9 {
          memory = '4G'
          time = '1h'
          publishDir.path = "${params.out_dir}/report"
          publishDir.mode = 'copy'
    }
    withLabel : biconductor_3_20_7_edger_normalize {
          memory = '5G'
          time = '1h'
          publishDir.path = "${params.out_dir}/read_counts"
          publishDir.mode = 'copy'
          publishDir.saveAs = {filename -> if (filename.indexOf("_RPKM.txt") > 0) "normalized/$filename" 
                              else if (filename.indexOf("_CPM.txt") > 0) "normalized/$filename" 
                              else null }
    }
    withLabel : biconductor_1_28_0_deseq2normalize {
          memory = '5G'
          time = '1h'
          publishDir.path = "${params.out_dir}/read_counts/normalize"
          publishDir.mode = 'copy'
       
    }
    withLabel : Subread_2_0_0_FeatureCounts {
          time = '24h'
          penv = 'threaded'
          cpus = 10
          memory = '25G'
          publishDir.path = "${params.out_dir}/read_counts/featureCounts"
          publishDir.mode = 'copy'
          publishDir.saveAs = {filename -> if (filename.indexOf("_biotype_") > 0) "biotypes/$filename" 
			             else "counts/$filename" }
     }
     withLabel : STAR_2_7_3a_GenomeGenerate {
          time = '24h'
          penv = 'threaded'
          cpus = 12
          memory = '150G'
          publishDir.path = "${params.out_dir}/reference_resources/STAR"
          publishDir.mode = 'copy'
     }
     withLabel : ucsc_377_GenePredToBed {
          time = '24h'
          penv = 'threaded'
          cpus = 2
          memory = '15G'
          publishDir.path = "${params.out_dir}/reference_resources/misc"
          publishDir.mode = 'copy'
     }
     withLabel : ucsc_377_GtfToGenePred {
          time = '24h'
          penv = 'threaded'
          cpus = 2
          memory = '15G'
     }
     withLabel : CreateIntervalList {
          time = '1h'
          publishDir.path = "${params.out_dir}/reference_resources/misc"
          publishDir.mode = 'copy'
     }
     withLabel : FASTQC_0_11_8 {
          time = '1h'
          publishDir.path = "${params.out_dir}/QC/FastQC"
          publishDir.mode = 'copy'
     }
     withLabel : SortMeRNA_4_2_0 {
          time = '24h'
          penv = 'threaded'
          cpus = 4
          memory = '15G'
          publishDir.path = "${params.out_dir}/QC/"
          publishDir.mode = 'copy'
          publishDir.saveAs = {filename ->
                         if (filename.indexOf("_rRNA_report.txt") > 0) "SorteMeRNA/logs/$filename"
			       else if (filename.indexOf("_filtered_rRNA.fastq.gz") > 0) "SorteMeRNA/rRNA-reads/$filename"
                         else null }
          
     }
     withLabel : TrimGalore_0_6_5 {
          time = '24h'
          penv = 'threaded'
          cpus = 2
          memory = '6G'
          publishDir.path = "${params.out_dir}/QC/TrimGalore"
          publishDir.mode = 'copy'
          publishDir.saveAs = {filename ->
                         if (filename.indexOf("_fastqc") > 0) "FastQC/$filename"
                         else if (filename.indexOf("trimming_report.txt") > 0) "logs/$filename"
                         else null}
     } 
}

executor {
    $sge {
      queueSize = 1000
      pollInterval = '30sec'
      queueStatInterval = '5min'
    }
    $slurm {
      queueSize = 1000
      pollInterval = '30sec'
      queueStatInterval = '5min'
    }
}

profiles {
  sge {
    process.executor = 'sge'
    process.queue = 'all.q'
    process.clusterOptions = '-P compgen '
  }

  slurm {
    process.executor = 'slurm'
    process.clusterOptions = '--gres=tmpspace:25G'
    process.queue = 'cpu'
  }
}

report {
  enabled = true
  file = "$params.out_dir/log/nextflow_report.html"
}

trace {
  enabled = true
  file = "$params.out_dir/log/nextflow_trace.txt"
  fields = 'task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes,vol_ctxt,inv_ctxt'
}

timeline {
  enabled = true
  file = "$params.out_dir/log/nextflow_timeline.html"
}

singularity {
  enabled = true
  autoMounts = true
  runOptions = '-B /hpc -B $TMPDIR:$TMPDIR'
  cacheDir = '/hpc/local/CentOS7/cog_bioinf/singularity_cache'
}

cleanup = true











